import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { tasksList } from './app.utils';
import { Context } from './context.interface';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) { }

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Hello!!!');
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async getTask(ctx: Context) {
    const todos = await this.appService.getAll()
    await ctx.reply(tasksList(todos));
  }

  @Hears('–ó–∞–≤–µ—Ä—à–∏—Ç—å')
  async doneTask(ctx: Context) {
    ctx.session.type = 'done';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ Id –∑–∞–¥–∞—á–∏: ');
  }
  @Hears('–°–æ–∑–¥–∞—Ç—å')
  async createTask(ctx: Context) {
    ctx.session.type = 'create';
    await ctx.reply('–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É: ')
  }
  @Hears('–£–¥–∞–ª–∏—Ç—å')
  async deleteTask(ctx: Context) {
    ctx.session.type = 'delete';
    await ctx.deleteMessage();
    await ctx.reply('–ù–∞–ø–∏—à–∏ Id –∑–∞–¥–∞—á–∏: ');
  }
  @Hears('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
  async editTask(ctx: Context) {
    ctx.session.type = 'edit';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ Id –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
      '<b>–í —Ñ–æ—Ä–º–∞—Ç–µ - 1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>'
    )
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return

    if (ctx.session.type === 'done') {
      const todos = await this.appService.doneTask(Number(message))

      if (!todos) {
        await ctx.deleteMessage();
        await ctx.reply('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç üëÄ, —Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ')
        return;
      }
      await ctx.reply(tasksList(todos));
    }

    if (ctx.session.type === 'delete') {
      const todos = this.appService.deleteTask(Number(message))

      if (!todos) {
        await ctx.deleteMessage();
        await ctx.reply('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç üëÄ, —Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ')
        return;
      }
      await ctx.reply(tasksList(todos));
    }

    if (ctx.session.type === 'edit') {
      const [taskId, taskName] = message.split(' | ');
      const todos = await this.appService.editTask(Number(taskId), taskName)
      if (!todos) {
        await ctx.deleteMessage();
        await ctx.reply('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç üëÄ, —Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ')
        return;
      }
      await ctx.reply(tasksList(todos));
    }

    if (ctx.session.type === 'create') {
      const todos = await this.appService.createTask(message);
      await ctx.reply(tasksList(todos))
    }
  }
}
